# This workflow will build a game using Nuitka and release it as a GitHub release
# the windows version needed to run around 50 min
# the macOS version needed to run around 20 min
# pls be patient to wait
# i have spended a lot of time to make this workflow
# if you have any question, pls contact me
# the macOS version is for eric to test the game as he getting trobble to run the game on his mac
# the windows version is for the most of the people to run the game
# i am not sure if we will upload all these 3 type of version when we submit our work
# this is better than pyinstaller as it will pack the python script in C code and compile it to a executable file
# the game will run faster and the file size will be smaller

name: Build and Release Game (nuitka)

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        architecture: 'x64'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pygame
        pip install nuitka
        pip install ordered-set
        pip install zstandard
        pip install -r requirements.txt

    - name: Build executable for Windows
      working-directory: ${{ github.workspace }}
      run: |
        python -m nuitka --standalone --onefile --assume-yes-for-downloads --windows-icon-from-ico="${{ github.workspace }}/assets/image/icon.ico" --include-data-dir="${{ github.workspace }}/assets=assets" --output-dir=dist --windows-console-mode=disable Main.py
        mv dist/main.exe dist/PropertyTycoon-Windows.exe

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: PropertyTycoon-Windows
        path: dist/PropertyTycoon-Windows.exe
        retention-days: 90

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        architecture: 'x64'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pygame
        pip install nuitka
        pip install ordered-set
        pip install zstandard
        pip install pillow
        pip install -r requirements.txt
        brew install ccache

    - name: Create icon script
      run: |
        echo '
        from PIL import Image
        import os
        
        os.makedirs("icon.iconset", exist_ok=True)
        
        img = Image.open("assets/image/icon.ico")
        
        sizes = [16, 32, 64, 128, 256, 512]
        for size in sizes:
            img_resized = img.resize((size, size))
            img_resized.save(f"icon.iconset/icon_{size}x{size}.png")
            img_resized.save(f"icon.iconset/icon_{size}x{size}@2x.png")
        
        os.system("iconutil -c icns icon.iconset")
        ' > create_icns.py
        python create_icns.py

    - name: Build macOS app
      working-directory: ${{ github.workspace }}
      run: |
        python -m nuitka --standalone --macos-create-app-bundle --macos-app-icon=icon.icns --assume-yes-for-downloads --include-data-dir="${{ github.workspace }}/assets=assets" --output-dir=dist Main.py
        
        # Rename the app bundle
        mv dist/main.app dist/PropertyTycoon.app
        
        # Create a DMG file
        hdiutil create -volname "PropertyTycoon" -srcfolder dist/PropertyTycoon.app -ov -format UDZO dist/PropertyTycoon-macOS.dmg
        
        # Also create a zip as backup
        cd dist
        zip -r PropertyTycoon-macOS.zip PropertyTycoon.app
        cd ..

    - name: Upload app bundle artifact
      uses: actions/upload-artifact@v4
      with:
        name: PropertyTycoon-macOS-app
        path: dist/PropertyTycoon.app
        retention-days: 90

    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: PropertyTycoon-macOS-dmg
        path: dist/PropertyTycoon-macOS.dmg
        retention-days: 90

    - name: Upload ZIP artifact
      uses: actions/upload-artifact@v4
      with:
        name: PropertyTycoon-macOS-zip
        path: dist/PropertyTycoon-macOS.zip
        retention-days: 90

  build-linux-arm64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Generate version number for package
      id: get_version_deb
      shell: bash
      run: |
        VERSION=$(date +'%Y.%m.%d.%H%M%S')
        echo "version=${VERSION}" >> $GITHUB_ENV
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

    - name: Build ARM64 .deb package using QEMU
      uses: uraimo/run-on-arch-action@v3
      with:
        arch: aarch64
        distro: ubuntu22.04
        install: |
          apt-get update -q -y
          apt-get install -q -y \
            python3 python3-pip python3-venv \
            libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev \
            patchelf \
            fakeroot \
            dpkg-dev \
            imagemagick \
            python3-pil \
            python3-pil.imagetk \
            ccache \
            build-essential
        run: |
          export DEBIAN_FRONTEND=noninteractive
          
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install wheel
          pip install pygame nuitka ordered-set zstandard pillow
          pip install -r requirements.txt

          python3 -m nuitka --standalone --onefile --assume-yes-for-downloads --include-data-dir="assets=assets" --output-dir=dist Main.py
          mv dist/main.bin dist/PropertyTycoon

          PKG_NAME="propertytycoon"
          PKG_VERSION="${{ steps.get_version_deb.outputs.version }}"
          PKG_ARCH="arm64"
          DEB_DIR="debian_pkg"
          INSTALL_DIR="${DEB_DIR}/usr/local/bin"
          ASSETS_INSTALL_DIR="${DEB_DIR}/usr/share/${PKG_NAME}/assets"
          APP_DIR="${DEB_DIR}/usr/share/applications"
          ICON_SIZE="256"
          ICON_DIR="${DEB_DIR}/usr/share/icons/hicolor/${ICON_SIZE}x${ICON_SIZE}/apps"
          ICON_SOURCE="assets/image/icon.ico"
          ICON_PNG="${PKG_NAME}.png"

          echo "Creating package structure for ${PKG_NAME}_${PKG_VERSION}_${PKG_ARCH}.deb"

          mkdir -p "${DEB_DIR}/DEBIAN"
          mkdir -p "${INSTALL_DIR}"
          mkdir -p "${APP_DIR}"
          mkdir -p "${ICON_DIR}"

          cp dist/PropertyTycoon "${INSTALL_DIR}/"
          chmod +x "${INSTALL_DIR}/PropertyTycoon"

          cat << EOF > "${DEB_DIR}/DEBIAN/control"
          Package: ${PKG_NAME}
          Version: ${PKG_VERSION}
          Architecture: ${PKG_ARCH}
          Maintainer: Your Name <your.email@example.com>
          Depends: python3, libsdl2-2.0-0, libsdl2-image-2.0-0, libsdl2-mixer-2.0-0, libsdl2-ttf-2.0-0
          Description: Property Tycoon Game - deb version built for Linux ARM64.
          EOF

          cat << EOF > "${APP_DIR}/${PKG_NAME}.desktop"
          [Desktop Entry]
          Name=Property Tycoon
          Comment=Property Trading Game
          Exec=/usr/local/bin/PropertyTycoon
          Icon=${PKG_NAME}
          Terminal=false
          Type=Application
          Categories=Game;BoardGame;
          EOF

          echo "Creating icon for application..."
          cat > create_icon.py << 'EOF'
          from PIL import Image, ImageDraw, ImageFont
          import os
          import sys

          icon_dir = sys.argv[1]
          icon_name = sys.argv[2]
          icon_size = int(sys.argv[3])

          if not os.path.exists(icon_dir):
              os.makedirs(icon_dir, exist_ok=True)

          img = Image.new('RGB', (icon_size, icon_size), color=(0, 120, 212))
          draw = ImageDraw.Draw(img)

          text_pos = (icon_size//2-20, icon_size//2-10)
          draw.text(text_pos, "PT", fill=(255, 255, 255), font=None)

          output_path = os.path.join(icon_dir, icon_name)
          img.save(output_path)
          print(f"Icon created at {output_path}")
          EOF

          python3 create_icon.py "${ICON_DIR}" "${ICON_PNG}" "${ICON_SIZE}"
          
          if [ -f "${ICON_DIR}/${ICON_PNG}" ]; then
            chmod 644 "${ICON_DIR}/${ICON_PNG}"
            echo "Icon file created successfully at ${ICON_DIR}/${ICON_PNG}"
          else
            echo "WARNING: Failed to create icon file. Creating empty file as fallback."
            touch "${ICON_DIR}/${ICON_PNG}"
            chmod 644 "${ICON_DIR}/${ICON_PNG}"
          fi

          echo "Building .deb package..."
          fakeroot dpkg-deb --build "${DEB_DIR}" "${PKG_NAME}_${PKG_VERSION}_${PKG_ARCH}.deb"

          echo "Package built: ${PKG_NAME}_${PKG_VERSION}_${PKG_ARCH}.deb"
          ls -l *.deb

    - name: Upload Linux ARM64 .deb artifact
      uses: actions/upload-artifact@v4
      with:
        name: PropertyTycoon-linux-arm64-deb
        path: "*.deb"
        retention-days: 90

  release:
    needs: [build-windows, build-macos, build-linux-arm64]
    runs-on: ubuntu-latest
    steps:
    - name: Generate version number
      id: get_version
      shell: bash
      run: |
        VERSION=$(date +'%d.%m.20%y-%H%M%S')
        echo "version=${VERSION}" >> $GITHUB_ENV
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: PropertyTycoon-Windows
        path: dist-windows

    - name: Download macOS DMG artifact
      uses: actions/download-artifact@v4
      with:
        name: PropertyTycoon-macOS-dmg
        path: dist-macos-dmg
        
    - name: Download macOS ZIP artifact
      uses: actions/download-artifact@v4
      with:
        name: PropertyTycoon-macOS-zip
        path: dist-macos-zip

    - name: Download Linux ARM64 artifact
      uses: actions/download-artifact@v4
      with:
        name: PropertyTycoon-linux-arm64-deb
        path: dist-linux-arm64

    - name: Create Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          dist-windows/PropertyTycoon-Windows.exe
          dist-macos-dmg/PropertyTycoon-macOS.dmg
          dist-macos-zip/PropertyTycoon-macOS.zip
          dist-linux-arm64.deb
        name: Build-${{ steps.get_version.outputs.version }}
        tag_name: Build-${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false
        fail_on_unmatched_files: false
